// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xdSnfxWCziyzb8tBiGitqa
// Component: 8XFSOb_fdhz
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: ILa2cLxyoTg0/component
import Checkbox from "../../Checkbox"; // plasmic-import: 65sYWpc3XrI/component

import { useScreenVariants as useScreenVariantsfKkpFikCuog } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: F-KkpFIKCuog/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fantaasta.module.css"; // plasmic-import: xdSnfxWCziyzb8tBiGitqa/projectcss
import sty from "./PlasmicAstaSettings.module.css"; // plasmic-import: 8XFSOb_fdhz/css

export type PlasmicAstaSettings__VariantMembers = {
  isDisabled: "isDisabled";
  isEditing: "isEditing";
};

export type PlasmicAstaSettings__VariantsArgs = {
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
};

type VariantPropType = keyof PlasmicAstaSettings__VariantsArgs;
export const PlasmicAstaSettings__VariantProps = new Array<VariantPropType>(
  "isDisabled",
  "isEditing"
);

export type PlasmicAstaSettings__ArgsType = {};
type ArgPropType = keyof PlasmicAstaSettings__ArgsType;
export const PlasmicAstaSettings__ArgProps = new Array<ArgPropType>();

export type PlasmicAstaSettings__OverridesType = {
  root?: p.Flex<"div">;
  modifcaButton?: p.Flex<"button">;
  salvaButton?: p.Flex<"button">;
  tabHeader?: p.Flex<"div">;
  infoTab?: p.Flex<typeof Button>;
  roseTab?: p.Flex<typeof Button>;
  roleTab?: p.Flex<typeof Button>;
  astaname?: p.Flex<"input">;
  numberpartecipants?: p.Flex<"input">;
  numberPlayers?: p.Flex<"input">;
  budget?: p.Flex<"input">;
  numDifensori?: p.Flex<"input">;
  numPortieri?: p.Flex<"input">;
  numAttaccanti?: p.Flex<"input">;
  numCentrocampisti?: p.Flex<"input">;
  checkboxContrattazione?: p.Flex<typeof Checkbox>;
  checkboxSvincolo?: p.Flex<typeof Checkbox>;
  checkboxDebito?: p.Flex<typeof Checkbox>;
};

export interface DefaultAstaSettingsProps {
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  isEditing?: SingleBooleanChoiceArg<"isEditing">;
  className?: string;
}

function PlasmicAstaSettings__RenderFunc(props: {
  variants: PlasmicAstaSettings__VariantsArgs;
  args: PlasmicAstaSettings__ArgsType;
  overrides: PlasmicAstaSettings__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfKkpFikCuog()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootisDisabled]: hasVariant(variants, "isDisabled", "isDisabled")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__esiuq, {
          [sty.freeBoxisDisabled__esiuq8WPh7]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.freeBoxisEditing__esiuqvbiRt]: hasVariant(
            variants,
            "isEditing",
            "isEditing"
          )
        })}
      >
        {(
          hasVariant(variants, "isEditing", "isEditing")
            ? true
            : hasVariant(variants, "isDisabled", "isDisabled")
            ? true
            : true
        ) ? (
          <button
            data-plasmic-name={"modifcaButton"}
            data-plasmic-override={overrides.modifcaButton}
            className={classNames(
              projectcss.all,
              projectcss.button,
              projectcss.__wab_text,
              sty.modifcaButton,
              {
                [sty.modifcaButtonisDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.modifcaButtonisEditing]: hasVariant(
                  variants,
                  "isEditing",
                  "isEditing"
                )
              }
            )}
            type={"button" as const}
          >
            {hasVariant(variants, "isEditing", "isEditing")
              ? "Modifica"
              : hasVariant(variants, "isDisabled", "isDisabled")
              ? "Modifica"
              : "Modifica"}
          </button>
        ) : null}
        {(
          hasVariant(variants, "isEditing", "isEditing")
            ? true
            : hasVariant(variants, "isDisabled", "isDisabled")
            ? true
            : true
        ) ? (
          <button
            data-plasmic-name={"salvaButton"}
            data-plasmic-override={overrides.salvaButton}
            className={classNames(
              projectcss.all,
              projectcss.button,
              projectcss.__wab_text,
              sty.salvaButton,
              {
                [sty.salvaButtonisDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.salvaButtonisEditing]: hasVariant(
                  variants,
                  "isEditing",
                  "isEditing"
                )
              }
            )}
            type={
              hasVariant(variants, "isEditing", "isEditing")
                ? ("submit" as const)
                : hasVariant(variants, "isDisabled", "isDisabled")
                ? ("submit" as const)
                : ("button" as const)
            }
          >
            {"Salva"}
          </button>
        ) : null}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__abwDh, {
          [sty.freeBoxisDisabled__abwDh8WPh7]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.freeBoxisEditing__abwDhVbiRt]: hasVariant(
            variants,
            "isEditing",
            "isEditing"
          )
        })}
      >
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"tabHeader"}
            data-plasmic-override={overrides.tabHeader}
            hasGap={true}
            className={classNames(projectcss.all, sty.tabHeader)}
          >
            <div className={classNames(projectcss.all, sty.column__oQ2Z8)}>
              <Button
                data-plasmic-name={"infoTab"}
                data-plasmic-override={overrides.infoTab}
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg__mqT7K)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.infoTab)}
                slot={"Informazioni"}
                tab={["tabSelected"]}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__jnUBn)}
                  role={"img"}
                />
              </Button>
            </div>

            <div className={classNames(projectcss.all, sty.column__aygHb)}>
              <Button
                data-plasmic-name={"roseTab"}
                data-plasmic-override={overrides.roseTab}
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg__lFiJs)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.roseTab)}
                slot={"Rose"}
                tab={["tabBase"]}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__iqgZ2)}
                  role={"img"}
                />
              </Button>
            </div>

            <div className={classNames(projectcss.all, sty.column__owk5)}>
              <Button
                data-plasmic-name={"roleTab"}
                data-plasmic-override={overrides.roleTab}
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg__plU9D)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.roleTab)}
                slot={"Regole"}
                tab={["tabBase"]}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__uqYCk)}
                  role={"img"}
                />
              </Button>
            </div>
          </p.Stack>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___3H3, {
            [sty.freeBoxisDisabled___3H38WPh7]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__haStJ, {
              [sty.freeBoxisDisabled__haStJ8WPh7]: hasVariant(
                variants,
                "isDisabled",
                "isDisabled"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__u0Hub, {
                [sty.freeBoxisDisabled__u0Hub8WPh7]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gjx9V,
                  {
                    [sty.textisDisabled__gjx9V8WPh7]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.textisEditing__gjx9VvbiRt]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    )
                  }
                )}
              >
                {"Nome Asta"}
              </div>

              <input
                data-plasmic-name={"astaname"}
                data-plasmic-override={overrides.astaname}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.astaname,
                  {
                    [sty.astanameisDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    )
                  }
                )}
                disabled={
                  hasVariant(variants, "isDisabled", "isDisabled")
                    ? true
                    : undefined
                }
                size={1 as const}
                type={"text" as const}
              />
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__umDm, {
                [sty.freeBoxisDisabled__umDm8WPh7]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qcPJp,
                  {
                    [sty.textisDisabled__qcPJp8WPh7]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.textisEditing__qcPJpVbiRt]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    )
                  }
                )}
              >
                {"Numero Partecipanti"}
              </div>

              <input
                data-plasmic-name={"numberpartecipants"}
                data-plasmic-override={overrides.numberpartecipants}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.numberpartecipants,
                  {
                    [sty.numberpartecipantsisDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    )
                  }
                )}
                disabled={
                  hasVariant(variants, "isDisabled", "isDisabled")
                    ? true
                    : undefined
                }
                size={1 as const}
                type={"text" as const}
              />
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__arUjc, {
                [sty.freeBoxisDisabled__arUjc8WPh7]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mwhz3,
                  {
                    [sty.textisDisabled__mwhz38WPh7]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.textisEditing__mwhz3VbiRt]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    )
                  }
                )}
              >
                {"Numero Calciatori Rosa"}
              </div>

              <input
                data-plasmic-name={"numberPlayers"}
                data-plasmic-override={overrides.numberPlayers}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.numberPlayers,
                  {
                    [sty.numberPlayersisDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    )
                  }
                )}
                disabled={
                  hasVariant(variants, "isDisabled", "isDisabled")
                    ? true
                    : undefined
                }
                placeholder={"Some placeholder" as const}
                size={1 as const}
                type={"text" as const}
              />
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__bGf5T, {
                [sty.freeBoxisDisabled__bGf5T8WPh7]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bi8Mq,
                  {
                    [sty.textisDisabled__bi8Mq8WPh7]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.textisEditing__bi8MqVbiRt]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    )
                  }
                )}
              >
                {"Budget Inziale Asta "}
              </div>

              <input
                data-plasmic-name={"budget"}
                data-plasmic-override={overrides.budget}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.budget,
                  {
                    [sty.budgetisDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    )
                  }
                )}
                disabled={
                  hasVariant(variants, "isDisabled", "isDisabled")
                    ? true
                    : undefined
                }
                placeholder={"Some placeholder" as const}
                size={1 as const}
                type={"text" as const}
              />
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kWXvK, {
              [sty.freeBoxisDisabled__kWXvK8WPh7]: hasVariant(
                variants,
                "isDisabled",
                "isDisabled"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__xQtKn, {
                [sty.freeBoxisDisabled__xQtKn8WPh7]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mxKrk,
                  {
                    [sty.textisDisabled__mxKrk8WPh7]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.textisEditing__mxKrkVbiRt]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    )
                  }
                )}
              >
                {"Numero Difensori"}
              </div>

              <input
                data-plasmic-name={"numDifensori"}
                data-plasmic-override={overrides.numDifensori}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.numDifensori,
                  {
                    [sty.numDifensoriisDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    )
                  }
                )}
                disabled={
                  hasVariant(variants, "isDisabled", "isDisabled")
                    ? true
                    : undefined
                }
                size={1 as const}
                type={"text" as const}
              />
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox___1Ad, {
                [sty.freeBoxisDisabled___1Ad8WPh7]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__amkW3,
                  {
                    [sty.textisDisabled__amkW38WPh7]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.textisEditing__amkW3VbiRt]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    )
                  }
                )}
              >
                {"Numero Portieri"}
              </div>

              <input
                data-plasmic-name={"numPortieri"}
                data-plasmic-override={overrides.numPortieri}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.numPortieri,
                  {
                    [sty.numPortieriisDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    )
                  }
                )}
                disabled={
                  hasVariant(variants, "isDisabled", "isDisabled")
                    ? true
                    : undefined
                }
                size={1 as const}
                type={"text" as const}
              />
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__vdEk5, {
                [sty.freeBoxisDisabled__vdEk58WPh7]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nodsR,
                  {
                    [sty.textisDisabled__nodsR8WPh7]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.textisEditing__nodsRvbiRt]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    )
                  }
                )}
              >
                {"Numero Attaccanti"}
              </div>

              <input
                data-plasmic-name={"numAttaccanti"}
                data-plasmic-override={overrides.numAttaccanti}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.numAttaccanti,
                  {
                    [sty.numAttaccantiisDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    )
                  }
                )}
                disabled={
                  hasVariant(variants, "isDisabled", "isDisabled")
                    ? true
                    : undefined
                }
                placeholder={"Some placeholder" as const}
                size={1 as const}
                type={"text" as const}
              />
            </div>

            <div
              className={classNames(projectcss.all, sty.freeBox__wdg4F, {
                [sty.freeBoxisDisabled__wdg4F8WPh7]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ft6Tp,
                  {
                    [sty.textisDisabled__ft6Tp8WPh7]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.textisEditing__ft6TpVbiRt]: hasVariant(
                      variants,
                      "isEditing",
                      "isEditing"
                    )
                  }
                )}
              >
                {"Numero Centrocampisti"}
              </div>

              <input
                data-plasmic-name={"numCentrocampisti"}
                data-plasmic-override={overrides.numCentrocampisti}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.numCentrocampisti,
                  {
                    [sty.numCentrocampistiisDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    )
                  }
                )}
                disabled={
                  hasVariant(variants, "isDisabled", "isDisabled")
                    ? true
                    : undefined
                }
                placeholder={"Some placeholder" as const}
                size={1 as const}
                type={"text" as const}
              />
            </div>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__uDdP)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__z409A)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nv52V
              )}
            >
              {"Contrattazione Fine Asta"}
            </div>

            <Checkbox
              data-plasmic-name={"checkboxContrattazione"}
              data-plasmic-override={overrides.checkboxContrattazione}
              className={classNames(
                "__wab_instance",
                sty.checkboxContrattazione,
                {
                  [sty.checkboxContrattazioneisDisabled]: hasVariant(
                    variants,
                    "isDisabled",
                    "isDisabled"
                  ),
                  [sty.checkboxContrattazioneisEditing]: hasVariant(
                    variants,
                    "isEditing",
                    "isEditing"
                  )
                }
              )}
              isDisabled={
                hasVariant(variants, "isDisabled", "isDisabled")
                  ? true
                  : undefined
              }
            >
              {"Abilita"}
            </Checkbox>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__dlknr)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lNde,
                {
                  [sty.textisEditing__lNdeVbiRt]: hasVariant(
                    variants,
                    "isEditing",
                    "isEditing"
                  )
                }
              )}
            >
              {"Svincola Giocatore al Termine dell'Asta"}
            </div>

            <Checkbox
              data-plasmic-name={"checkboxSvincolo"}
              data-plasmic-override={overrides.checkboxSvincolo}
              className={classNames("__wab_instance", sty.checkboxSvincolo, {
                [sty.checkboxSvincoloisDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.checkboxSvincoloisEditing]: hasVariant(
                  variants,
                  "isEditing",
                  "isEditing"
                )
              })}
              isDisabled={
                hasVariant(variants, "isDisabled", "isDisabled")
                  ? true
                  : undefined
              }
            >
              {"Abilita"}
            </Checkbox>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___4Cy48)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eLjMi
              )}
            >
              {"I partecipanti possono andare in rosso"}
            </div>

            <Checkbox
              data-plasmic-name={"checkboxDebito"}
              data-plasmic-override={overrides.checkboxDebito}
              className={classNames("__wab_instance", sty.checkboxDebito, {
                [sty.checkboxDebitoisDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.checkboxDebitoisEditing]: hasVariant(
                  variants,
                  "isEditing",
                  "isEditing"
                )
              })}
              isDisabled={
                hasVariant(variants, "isDisabled", "isDisabled")
                  ? true
                  : undefined
              }
            >
              {"Abilita"}
            </Checkbox>
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modifcaButton",
    "salvaButton",
    "tabHeader",
    "infoTab",
    "roseTab",
    "roleTab",
    "astaname",
    "numberpartecipants",
    "numberPlayers",
    "budget",
    "numDifensori",
    "numPortieri",
    "numAttaccanti",
    "numCentrocampisti",
    "checkboxContrattazione",
    "checkboxSvincolo",
    "checkboxDebito"
  ],
  modifcaButton: ["modifcaButton"],
  salvaButton: ["salvaButton"],
  tabHeader: ["tabHeader", "infoTab", "roseTab", "roleTab"],
  infoTab: ["infoTab"],
  roseTab: ["roseTab"],
  roleTab: ["roleTab"],
  astaname: ["astaname"],
  numberpartecipants: ["numberpartecipants"],
  numberPlayers: ["numberPlayers"],
  budget: ["budget"],
  numDifensori: ["numDifensori"],
  numPortieri: ["numPortieri"],
  numAttaccanti: ["numAttaccanti"],
  numCentrocampisti: ["numCentrocampisti"],
  checkboxContrattazione: ["checkboxContrattazione"],
  checkboxSvincolo: ["checkboxSvincolo"],
  checkboxDebito: ["checkboxDebito"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  modifcaButton: "button";
  salvaButton: "button";
  tabHeader: "div";
  infoTab: typeof Button;
  roseTab: typeof Button;
  roleTab: typeof Button;
  astaname: "input";
  numberpartecipants: "input";
  numberPlayers: "input";
  budget: "input";
  numDifensori: "input";
  numPortieri: "input";
  numAttaccanti: "input";
  numCentrocampisti: "input";
  checkboxContrattazione: typeof Checkbox;
  checkboxSvincolo: typeof Checkbox;
  checkboxDebito: typeof Checkbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAstaSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAstaSettings__VariantsArgs;
    args?: PlasmicAstaSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAstaSettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAstaSettings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAstaSettings__ArgProps,
      internalVariantPropNames: PlasmicAstaSettings__VariantProps
    });

    return PlasmicAstaSettings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAstaSettings";
  } else {
    func.displayName = `PlasmicAstaSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicAstaSettings = Object.assign(
  // Top-level PlasmicAstaSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modifcaButton: makeNodeComponent("modifcaButton"),
    salvaButton: makeNodeComponent("salvaButton"),
    tabHeader: makeNodeComponent("tabHeader"),
    infoTab: makeNodeComponent("infoTab"),
    roseTab: makeNodeComponent("roseTab"),
    roleTab: makeNodeComponent("roleTab"),
    astaname: makeNodeComponent("astaname"),
    numberpartecipants: makeNodeComponent("numberpartecipants"),
    numberPlayers: makeNodeComponent("numberPlayers"),
    budget: makeNodeComponent("budget"),
    numDifensori: makeNodeComponent("numDifensori"),
    numPortieri: makeNodeComponent("numPortieri"),
    numAttaccanti: makeNodeComponent("numAttaccanti"),
    numCentrocampisti: makeNodeComponent("numCentrocampisti"),
    checkboxContrattazione: makeNodeComponent("checkboxContrattazione"),
    checkboxSvincolo: makeNodeComponent("checkboxSvincolo"),
    checkboxDebito: makeNodeComponent("checkboxDebito"),

    // Metadata about props expected for PlasmicAstaSettings
    internalVariantProps: PlasmicAstaSettings__VariantProps,
    internalArgProps: PlasmicAstaSettings__ArgProps
  }
);

export default PlasmicAstaSettings;
/* prettier-ignore-end */
