// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xdSnfxWCziyzb8tBiGitqa
// Component: p3a1HfRCrQ1
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Divider from "../../Divider"; // plasmic-import: gQsAiY6bIFOZ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fantaasta.module.css"; // plasmic-import: xdSnfxWCziyzb8tBiGitqa/projectcss
import sty from "./PlasmicLoginForm.module.css"; // plasmic-import: p3a1HfRCrQ1/css

export type PlasmicLoginForm__VariantMembers = {
  arena: "arena";
};

export type PlasmicLoginForm__VariantsArgs = {
  arena?: SingleBooleanChoiceArg<"arena">;
};

type VariantPropType = keyof PlasmicLoginForm__VariantsArgs;
export const PlasmicLoginForm__VariantProps = new Array<VariantPropType>(
  "arena"
);

export type PlasmicLoginForm__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLoginForm__ArgsType;
export const PlasmicLoginForm__ArgProps = new Array<ArgPropType>("children");

export type PlasmicLoginForm__OverridesType = {
  root?: p.Flex<"div">;
  divider?: p.Flex<typeof Divider>;
};

export interface DefaultLoginFormProps {
  children?: React.ReactNode;
  arena?: SingleBooleanChoiceArg<"arena">;
  className?: string;
}

function PlasmicLoginForm__RenderFunc(props: {
  variants: PlasmicLoginForm__VariantsArgs;
  args: PlasmicLoginForm__ArgsType;
  overrides: PlasmicLoginForm__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootarena]: hasVariant(variants, "arena", "arena") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__oasnn, {
          [sty.freeBoxarena__oasnnek1T4]: hasVariant(variants, "arena", "arena")
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aAo7, {
            [sty.freeBoxarena__aAo7Ek1T4]: hasVariant(
              variants,
              "arena",
              "arena"
            )
          })}
        >
          {(hasVariant(variants, "arena", "arena") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cPcOo,
                {
                  [sty.textarena__cPcOOek1T4]: hasVariant(
                    variants,
                    "arena",
                    "arena"
                  )
                }
              )}
            >
              {"Sign up with"}
            </div>
          ) : null}

          <div
            className={classNames(projectcss.all, sty.freeBox__pGslM, {
              [sty.freeBoxarena__pGslMek1T4]: hasVariant(
                variants,
                "arena",
                "arena"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.children
            })}
          </div>
        </p.Stack>

        <Divider
          data-plasmic-name={"divider"}
          data-plasmic-override={overrides.divider}
          className={classNames("__wab_instance", sty.divider)}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__w6Xsc, {
            [sty.freeBoxarena__w6Xscek1T4]: hasVariant(
              variants,
              "arena",
              "arena"
            )
          })}
        >
          {(hasVariant(variants, "arena", "arena") ? true : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__z2OwR,
                {
                  [sty.textarena__z2OwRek1T4]: hasVariant(
                    variants,
                    "arena",
                    "arena"
                  )
                }
              )}
            >
              {
                "A cras sagittis odio vestibulum pulvinar a eget hendrerit id vestibulum a leo sociosqu dictumst dictumst natoque magnis parturient."
              }
            </div>
          ) : null}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "divider"],
  divider: ["divider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  divider: typeof Divider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLoginForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLoginForm__VariantsArgs;
    args?: PlasmicLoginForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLoginForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLoginForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLoginForm__ArgProps,
      internalVariantPropNames: PlasmicLoginForm__VariantProps
    });

    return PlasmicLoginForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLoginForm";
  } else {
    func.displayName = `PlasmicLoginForm.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginForm = Object.assign(
  // Top-level PlasmicLoginForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    divider: makeNodeComponent("divider"),

    // Metadata about props expected for PlasmicLoginForm
    internalVariantProps: PlasmicLoginForm__VariantProps,
    internalArgProps: PlasmicLoginForm__ArgProps
  }
);

export default PlasmicLoginForm;
/* prettier-ignore-end */
