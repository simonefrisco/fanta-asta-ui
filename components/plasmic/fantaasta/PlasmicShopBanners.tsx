// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xdSnfxWCziyzb8tBiGitqa
// Component: p-2o_pYCpf4T
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Banner from "../../Banner"; // plasmic-import: bPsGEjQSDQD0/component
import Button from "../../Button"; // plasmic-import: ILa2cLxyoTg0/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fantaasta.module.css"; // plasmic-import: xdSnfxWCziyzb8tBiGitqa/projectcss
import sty from "./PlasmicShopBanners.module.css"; // plasmic-import: p-2o_pYCpf4T/css

export type PlasmicShopBanners__VariantMembers = {};

export type PlasmicShopBanners__VariantsArgs = {};
type VariantPropType = keyof PlasmicShopBanners__VariantsArgs;
export const PlasmicShopBanners__VariantProps = new Array<VariantPropType>();

export type PlasmicShopBanners__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicShopBanners__ArgsType;
export const PlasmicShopBanners__ArgProps = new Array<ArgPropType>("children");

export type PlasmicShopBanners__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultShopBannersProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicShopBanners__RenderFunc(props: {
  variants: PlasmicShopBanners__VariantsArgs;
  args: PlasmicShopBanners__ArgsType;
  overrides: PlasmicShopBanners__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <Banner
              className={classNames("__wab_instance", sty.banner___6Z0U)}
              left={
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yLqZc
                    )}
                  >
                    {"Sunglasses Collection"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gbfMr
                    )}
                  >
                    {"Get 25% off on selected items"}
                  </div>

                  <Button
                    children2={
                      <svg
                        className={classNames(projectcss.all, sty.svg__zDoAc)}
                        role={"img"}
                      />
                    }
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qPipq
                        )}
                      >
                        {"Go to collection ->"}
                      </div>
                    }
                  >
                    <svg
                      className={classNames(projectcss.all, sty.svg__yszNu)}
                      role={"img"}
                    />
                  </Button>
                </React.Fragment>
              }
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pLgiA)}
            >
              <Banner
                className={classNames("__wab_instance", sty.banner__ndYlx)}
                left={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dECmV
                      )}
                    >
                      {"Sunglasses Collection"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wCyjn
                      )}
                    >
                      {"Get 25% off on selected items"}
                    </div>

                    <Button
                      children2={
                        <svg
                          className={classNames(
                            projectcss.all,
                            sty.svg___6Tf0L
                          )}
                          role={"img"}
                        />
                      }
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mU9Z
                          )}
                        >
                          {"Go to collection ->"}
                        </div>
                      }
                    >
                      <svg
                        className={classNames(projectcss.all, sty.svg__n5XYw)}
                        role={"img"}
                      />
                    </Button>
                  </React.Fragment>
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___2N1Mi)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  src={
                    "https://images.unsplash.com/photo-1463100099107-aa0980c362e6?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2850&q=80" as const
                  }
                />
              </Banner>

              <Banner
                className={classNames("__wab_instance", sty.banner__gShXe)}
                left={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kSmip
                      )}
                    >
                      {"Sunglasses Collection"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jxwkG
                      )}
                    >
                      {"Get 25% off on selected items"}
                    </div>

                    <Button
                      children2={
                        <svg
                          className={classNames(projectcss.all, sty.svg__vWdbL)}
                          role={"img"}
                        />
                      }
                      slot={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v4KN0
                          )}
                        >
                          {"Go to collection ->"}
                        </div>
                      }
                    >
                      <svg
                        className={classNames(projectcss.all, sty.svg__xTit5)}
                        role={"img"}
                      />
                    </Button>
                  </React.Fragment>
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__uCglE)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  src={
                    "https://images.unsplash.com/photo-1554568218-0f1715e72254?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1834&q=80" as const
                  }
                />
              </Banner>
            </p.Stack>
          </React.Fragment>
        ),
        value: args.children
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopBanners__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopBanners__VariantsArgs;
    args?: PlasmicShopBanners__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShopBanners__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShopBanners__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicShopBanners__ArgProps,
      internalVariantPropNames: PlasmicShopBanners__VariantProps
    });

    return PlasmicShopBanners__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopBanners";
  } else {
    func.displayName = `PlasmicShopBanners.${nodeName}`;
  }
  return func;
}

export const PlasmicShopBanners = Object.assign(
  // Top-level PlasmicShopBanners renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicShopBanners
    internalVariantProps: PlasmicShopBanners__VariantProps,
    internalArgProps: PlasmicShopBanners__ArgProps
  }
);

export default PlasmicShopBanners;
/* prettier-ignore-end */
