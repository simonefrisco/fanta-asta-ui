// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xdSnfxWCziyzb8tBiGitqa
// Component: Uev3p9VZayM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navigation from "../../Navigation"; // plasmic-import: 3pqoTJs_Sosu/component
import Logo from "../../Logo"; // plasmic-import: cTUv7R2uelNJ/component
import Button from "../../Button"; // plasmic-import: ILa2cLxyoTg0/component
import AstaForm from "../../AstaForm"; // plasmic-import: TXm06OyomR/component

import { useScreenVariants as useScreenVariantsfKkpFikCuog } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: F-KkpFIKCuog/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fantaasta.module.css"; // plasmic-import: xdSnfxWCziyzb8tBiGitqa/projectcss
import sty from "./PlasmicHeroSectionArena.module.css"; // plasmic-import: Uev3p9VZayM/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: Sae6eXYvAd/icon

export type PlasmicHeroSectionArena__VariantMembers = {
  dashboardActive: "dashboardActive";
  general: "noAste" | "withAste" | "chooseAsta" | "createAsta";
};

export type PlasmicHeroSectionArena__VariantsArgs = {
  dashboardActive?: SingleBooleanChoiceArg<"dashboardActive">;
  general?: SingleChoiceArg<
    "noAste" | "withAste" | "chooseAsta" | "createAsta"
  >;
};

type VariantPropType = keyof PlasmicHeroSectionArena__VariantsArgs;
export const PlasmicHeroSectionArena__VariantProps = new Array<VariantPropType>(
  "dashboardActive",
  "general"
);

export type PlasmicHeroSectionArena__ArgsType = {};
type ArgPropType = keyof PlasmicHeroSectionArena__ArgsType;
export const PlasmicHeroSectionArena__ArgProps = new Array<ArgPropType>();

export type PlasmicHeroSectionArena__OverridesType = {
  root?: p.Flex<"div">;
  navigation?: p.Flex<typeof Navigation>;
  imgBg?: p.Flex<typeof p.PlasmicImg>;
  layerBg?: p.Flex<"div">;
  header?: p.Flex<"div">;
  nuovaAstaButton?: p.Flex<"button">;
  form?: p.Flex<"div">;
  closeFormButton?: p.Flex<"button">;
  svg?: p.Flex<"svg">;
  astaForm?: p.Flex<typeof AstaForm>;
  startButtons?: p.Flex<"div">;
  creaAstaButton?: p.Flex<"button">;
  partecipaAstaButton?: p.Flex<"button">;
  asteBoard?: p.Flex<"div">;
};

export interface DefaultHeroSectionArenaProps {
  dashboardActive?: SingleBooleanChoiceArg<"dashboardActive">;
  general?: SingleChoiceArg<
    "noAste" | "withAste" | "chooseAsta" | "createAsta"
  >;
  className?: string;
}

function PlasmicHeroSectionArena__RenderFunc(props: {
  variants: PlasmicHeroSectionArena__VariantsArgs;
  args: PlasmicHeroSectionArena__ArgsType;
  overrides: PlasmicHeroSectionArena__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfKkpFikCuog()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__eoNo8)}>
        <Navigation
          data-plasmic-name={"navigation"}
          data-plasmic-override={overrides.navigation}
          className={classNames("__wab_instance", sty.navigation)}
        />

        {true ? (
          <p.PlasmicImg
            data-plasmic-name={"imgBg"}
            data-plasmic-override={overrides.imgBg}
            alt={""}
            className={classNames(sty.imgBg)}
            displayHeight={"3331px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"none" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            src={
              "https://images.unsplash.com/photo-1558591710-4b4a1ae0f04d?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1834&q=80" as const
            }
          />
        ) : null}
        {true ? (
          <div
            data-plasmic-name={"layerBg"}
            data-plasmic-override={overrides.layerBg}
            className={classNames(projectcss.all, sty.layerBg)}
          />
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fAlT, {
              [sty.freeBoxdashboardActive__fAlTa8RUg]: hasVariant(
                variants,
                "dashboardActive",
                "dashboardActive"
              ),
              [sty.freeBoxgeneral_chooseAsta__fAlTLzJQp]: hasVariant(
                variants,
                "general",
                "chooseAsta"
              ),
              [sty.freeBoxgeneral_createAsta__fAlT3Ojo3]: hasVariant(
                variants,
                "general",
                "createAsta"
              ),
              [sty.freeBoxgeneral_withAste__fAlTlin3D]: hasVariant(
                variants,
                "general",
                "withAste"
              )
            })}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header)}
              >
                <div className={classNames(projectcss.all, sty.column__qkxSj)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3WGzC
                    )}
                  >
                    {"Le mie Aste"}
                  </div>
                </div>

                <div
                  className={classNames(projectcss.all, sty.column__i6SuP)}
                />

                <div
                  className={classNames(projectcss.all, sty.column___3DH6X)}
                />

                <div
                  className={classNames(projectcss.all, sty.column__n2RFm)}
                />

                <div className={classNames(projectcss.all, sty.column__oc3G)}>
                  {true ? (
                    <button
                      data-plasmic-name={"nuovaAstaButton"}
                      data-plasmic-override={overrides.nuovaAstaButton}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.nuovaAstaButton
                      )}
                      type={"button" as const}
                    >
                      {"Nuova Asta"}
                    </button>
                  ) : null}
                </div>
              </div>
            ) : null}
            {(
              hasVariant(variants, "general", "createAsta")
                ? true
                : hasVariant(variants, "general", "chooseAsta")
                ? true
                : hasVariant(variants, "general", "withAste")
                ? true
                : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__tqa0N, {
                  [sty.freeBoxdashboardActive__tqa0Na8RUg]: hasVariant(
                    variants,
                    "dashboardActive",
                    "dashboardActive"
                  ),
                  [sty.freeBoxgeneral_chooseAsta__tqa0NLzJQp]: hasVariant(
                    variants,
                    "general",
                    "chooseAsta"
                  ),
                  [sty.freeBoxgeneral_createAsta__tqa0N3Ojo3]: hasVariant(
                    variants,
                    "general",
                    "createAsta"
                  ),
                  [sty.freeBoxgeneral_noAste__tqa0NvUu5]: hasVariant(
                    variants,
                    "general",
                    "noAste"
                  ),
                  [sty.freeBoxgeneral_withAste__tqa0NLin3D]: hasVariant(
                    variants,
                    "general",
                    "withAste"
                  )
                })}
              >
                {(
                  hasVariant(variants, "general", "createAsta")
                    ? true
                    : hasVariant(variants, "general", "chooseAsta")
                    ? true
                    : true
                ) ? (
                  <div
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    className={classNames(projectcss.all, sty.form, {
                      [sty.formgeneral_chooseAsta]: hasVariant(
                        variants,
                        "general",
                        "chooseAsta"
                      ),
                      [sty.formgeneral_createAsta]: hasVariant(
                        variants,
                        "general",
                        "createAsta"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1IOwY,
                        {
                          [sty.freeBoxgeneral_createAsta___1IOwY3Ojo3]:
                            hasVariant(variants, "general", "createAsta")
                        }
                      )}
                    >
                      <button
                        data-plasmic-name={"closeFormButton"}
                        data-plasmic-override={overrides.closeFormButton}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          sty.closeFormButton
                        )}
                      >
                        <Icon15Icon
                          data-plasmic-name={"svg"}
                          data-plasmic-override={overrides.svg}
                          className={classNames(projectcss.all, sty.svg)}
                          role={"img"}
                        />
                      </button>
                    </div>

                    {(
                      hasVariant(variants, "general", "createAsta")
                        ? true
                        : true
                    ) ? (
                      <AstaForm
                        data-plasmic-name={"astaForm"}
                        data-plasmic-override={overrides.astaForm}
                        className={classNames("__wab_instance", sty.astaForm, {
                          [sty.astaFormgeneral_createAsta]: hasVariant(
                            variants,
                            "general",
                            "createAsta"
                          )
                        })}
                        steps={["first"]}
                      />
                    ) : null}
                    {(
                      hasVariant(variants, "general", "createAsta")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"startButtons"}
                        data-plasmic-override={overrides.startButtons}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.startButtons,
                          {
                            [sty.startButtonsgeneral_createAsta]: hasVariant(
                              variants,
                              "general",
                              "createAsta"
                            )
                          }
                        )}
                      >
                        <button
                          data-plasmic-name={"creaAstaButton"}
                          data-plasmic-override={overrides.creaAstaButton}
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.creaAstaButton
                          )}
                          type={"button" as const}
                        >
                          {"Crea Asta"}
                        </button>

                        <button
                          data-plasmic-name={"partecipaAstaButton"}
                          data-plasmic-override={overrides.partecipaAstaButton}
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.partecipaAstaButton
                          )}
                          type={"button" as const}
                        >
                          {"Partecipa Asta"}
                        </button>
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
                {(
                  hasVariant(variants, "general", "createAsta")
                    ? true
                    : hasVariant(variants, "general", "chooseAsta")
                    ? true
                    : hasVariant(variants, "general", "withAste")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ei3Rx,
                      {
                        [sty.textdashboardActive__ei3RXa8RUg]: hasVariant(
                          variants,
                          "dashboardActive",
                          "dashboardActive"
                        ),
                        [sty.textgeneral_chooseAsta__ei3RxLzJQp]: hasVariant(
                          variants,
                          "general",
                          "chooseAsta"
                        ),
                        [sty.textgeneral_createAsta__ei3Rx3Ojo3]: hasVariant(
                          variants,
                          "general",
                          "createAsta"
                        ),
                        [sty.textgeneral_withAste__ei3Rxlin3D]: hasVariant(
                          variants,
                          "general",
                          "withAste"
                        )
                      }
                    )}
                  >
                    {"Non ci sono aste"}
                  </div>
                ) : null}
                {(
                  hasVariant(variants, "general", "createAsta")
                    ? true
                    : hasVariant(variants, "general", "chooseAsta")
                    ? true
                    : hasVariant(variants, "general", "withAste")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"asteBoard"}
                    data-plasmic-override={overrides.asteBoard}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.asteBoard, {
                      [sty.asteBoarddashboardActive]: hasVariant(
                        variants,
                        "dashboardActive",
                        "dashboardActive"
                      ),
                      [sty.asteBoardgeneral_chooseAsta]: hasVariant(
                        variants,
                        "general",
                        "chooseAsta"
                      ),
                      [sty.asteBoardgeneral_createAsta]: hasVariant(
                        variants,
                        "general",
                        "createAsta"
                      ),
                      [sty.asteBoardgeneral_noAste]: hasVariant(
                        variants,
                        "general",
                        "noAste"
                      ),
                      [sty.asteBoardgeneral_withAste]: hasVariant(
                        variants,
                        "general",
                        "withAste"
                      )
                    })}
                  />
                ) : null}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigation",
    "imgBg",
    "layerBg",
    "header",
    "nuovaAstaButton",
    "form",
    "closeFormButton",
    "svg",
    "astaForm",
    "startButtons",
    "creaAstaButton",
    "partecipaAstaButton",
    "asteBoard"
  ],
  navigation: ["navigation"],
  imgBg: ["imgBg"],
  layerBg: ["layerBg"],
  header: ["header", "nuovaAstaButton"],
  nuovaAstaButton: ["nuovaAstaButton"],
  form: [
    "form",
    "closeFormButton",
    "svg",
    "astaForm",
    "startButtons",
    "creaAstaButton",
    "partecipaAstaButton"
  ],
  closeFormButton: ["closeFormButton", "svg"],
  svg: ["svg"],
  astaForm: ["astaForm"],
  startButtons: ["startButtons", "creaAstaButton", "partecipaAstaButton"],
  creaAstaButton: ["creaAstaButton"],
  partecipaAstaButton: ["partecipaAstaButton"],
  asteBoard: ["asteBoard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigation: typeof Navigation;
  imgBg: typeof p.PlasmicImg;
  layerBg: "div";
  header: "div";
  nuovaAstaButton: "button";
  form: "div";
  closeFormButton: "button";
  svg: "svg";
  astaForm: typeof AstaForm;
  startButtons: "div";
  creaAstaButton: "button";
  partecipaAstaButton: "button";
  asteBoard: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroSectionArena__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroSectionArena__VariantsArgs;
    args?: PlasmicHeroSectionArena__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeroSectionArena__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroSectionArena__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroSectionArena__ArgProps,
      internalVariantPropNames: PlasmicHeroSectionArena__VariantProps
    });

    return PlasmicHeroSectionArena__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroSectionArena";
  } else {
    func.displayName = `PlasmicHeroSectionArena.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroSectionArena = Object.assign(
  // Top-level PlasmicHeroSectionArena renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigation: makeNodeComponent("navigation"),
    imgBg: makeNodeComponent("imgBg"),
    layerBg: makeNodeComponent("layerBg"),
    header: makeNodeComponent("header"),
    nuovaAstaButton: makeNodeComponent("nuovaAstaButton"),
    form: makeNodeComponent("form"),
    closeFormButton: makeNodeComponent("closeFormButton"),
    svg: makeNodeComponent("svg"),
    astaForm: makeNodeComponent("astaForm"),
    startButtons: makeNodeComponent("startButtons"),
    creaAstaButton: makeNodeComponent("creaAstaButton"),
    partecipaAstaButton: makeNodeComponent("partecipaAstaButton"),
    asteBoard: makeNodeComponent("asteBoard"),

    // Metadata about props expected for PlasmicHeroSectionArena
    internalVariantProps: PlasmicHeroSectionArena__VariantProps,
    internalArgProps: PlasmicHeroSectionArena__ArgProps
  }
);

export default PlasmicHeroSectionArena;
/* prettier-ignore-end */
