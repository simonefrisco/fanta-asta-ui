// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xdSnfxWCziyzb8tBiGitqa
// Component: NSc17XI_uh
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fantaasta.module.css"; // plasmic-import: xdSnfxWCziyzb8tBiGitqa/projectcss
import sty from "./PlasmicSidebarItem.module.css"; // plasmic-import: NSc17XI_uh/css

import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: 0cK10h_kft/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: wFdAgt-MAnO/icon

export type PlasmicSidebarItem__VariantMembers = {
  mode: "standard" | "dropdown";
  withBadge: "withBadge";
  itemName: "itemName";
  isActive: "isActive";
};

export type PlasmicSidebarItem__VariantsArgs = {
  mode?: SingleChoiceArg<"standard" | "dropdown">;
  withBadge?: SingleBooleanChoiceArg<"withBadge">;
  itemName?: SingleBooleanChoiceArg<"itemName">;
  isActive?: SingleBooleanChoiceArg<"isActive">;
};

type VariantPropType = keyof PlasmicSidebarItem__VariantsArgs;
export const PlasmicSidebarItem__VariantProps = new Array<VariantPropType>(
  "mode",
  "withBadge",
  "itemName",
  "isActive"
);

export type PlasmicSidebarItem__ArgsType = {
  name?: React.ReactNode;
  iconslot?: React.ReactNode;
  badgenum?: React.ReactNode;
  redirect?: string;
};

type ArgPropType = keyof PlasmicSidebarItem__ArgsType;
export const PlasmicSidebarItem__ArgProps = new Array<ArgPropType>(
  "name",
  "iconslot",
  "badgenum",
  "redirect"
);

export type PlasmicSidebarItem__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  badge2?: p.Flex<"div">;
  primary?: p.Flex<"div">;
  _32Shape02BadgeLableRound?: p.Flex<"div">;
  shadow2?: p.Flex<"div">;
  background3?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultSidebarItemProps {
  name?: React.ReactNode;
  iconslot?: React.ReactNode;
  badgenum?: React.ReactNode;
  redirect?: string;
  mode?: SingleChoiceArg<"standard" | "dropdown">;
  withBadge?: SingleBooleanChoiceArg<"withBadge">;
  itemName?: SingleBooleanChoiceArg<"itemName">;
  isActive?: SingleBooleanChoiceArg<"isActive">;
  className?: string;
}

function PlasmicSidebarItem__RenderFunc(props: {
  variants: PlasmicSidebarItem__VariantsArgs;
  args: PlasmicSidebarItem__ArgsType;
  overrides: PlasmicSidebarItem__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootitemName]: hasVariant(variants, "itemName", "itemName") }
      )}
      component={Link}
      href={args.redirect}
      platform={"nextjs"}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__ehzqU, {
            [sty.freeBoxisActive__ehzqUkj45A]: hasVariant(
              variants,
              "isActive",
              "isActive"
            ),
            [sty.freeBoxitemName__ehzqUpvz1T]: hasVariant(
              variants,
              "itemName",
              "itemName"
            )
          })}
        />
      ) : null}
      {(triggers.hover_root ? true : true) ? (
        <div className={classNames(projectcss.all, sty.freeBox___3LmQx)} />
      ) : null}
      {(hasVariant(variants, "itemName", "itemName") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__mXkCs, {
            [sty.freeBoxitemName__mXkCsPvz1T]: hasVariant(
              variants,
              "itemName",
              "itemName"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox___9R8E0)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Icon19Icon
                  className={classNames(projectcss.all, sty.svg__kl7Ie)}
                  role={"img"}
                />
              ),

              value: args.iconslot,
              className: classNames(sty.slotTargetIconslot, {
                [sty.slotTargetIconslotisActive]: hasVariant(
                  variants,
                  "isActive",
                  "isActive"
                )
              })
            })}
          </div>
        </div>
      ) : null}

      <div
        className={classNames(projectcss.all, sty.freeBox__oZvVf, {
          [sty.freeBoxitemName__oZvVfPvz1T]: hasVariant(
            variants,
            "itemName",
            "itemName"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__qxrpj, {
            [sty.freeBoxisActive__qxrpjKj45A]: hasVariant(
              variants,
              "isActive",
              "isActive"
            ),
            [sty.freeBoxitemName__qxrpjPvz1T]: hasVariant(
              variants,
              "itemName",
              "itemName"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Le mie Aste",
            value: args.name,
            className: classNames(sty.slotTargetName, {
              [sty.slotTargetNameisActive]: hasVariant(
                variants,
                "isActive",
                "isActive"
              ),
              [sty.slotTargetNameitemName]: hasVariant(
                variants,
                "itemName",
                "itemName"
              )
            })
          })}
        </div>
      </div>

      {(hasVariant(variants, "itemName", "itemName") ? true : true) ? (
        <div
          data-plasmic-name={"badge2"}
          data-plasmic-override={overrides.badge2}
          className={classNames(projectcss.all, sty.badge2, {
            [sty.badge2itemName]: hasVariant(variants, "itemName", "itemName"),
            [sty.badge2withBadge]: hasVariant(
              variants,
              "withBadge",
              "withBadge"
            )
          })}
        >
          {(hasVariant(variants, "withBadge", "withBadge") ? true : true) ? (
            <div
              data-plasmic-name={"primary"}
              data-plasmic-override={overrides.primary}
              className={classNames(projectcss.all, sty.primary, {
                [sty.primarywithBadge]: hasVariant(
                  variants,
                  "withBadge",
                  "withBadge"
                )
              })}
            >
              <div
                data-plasmic-name={"_32Shape02BadgeLableRound"}
                data-plasmic-override={overrides._32Shape02BadgeLableRound}
                className={classNames(
                  projectcss.all,
                  sty._32Shape02BadgeLableRound
                )}
              >
                <div
                  data-plasmic-name={"shadow2"}
                  data-plasmic-override={overrides.shadow2}
                  className={classNames(projectcss.all, sty.shadow2)}
                />

                <div
                  data-plasmic-name={"background3"}
                  data-plasmic-override={overrides.background3}
                  className={classNames(projectcss.all, sty.background3, {
                    [sty.background3withBadge]: hasVariant(
                      variants,
                      "withBadge",
                      "withBadge"
                    )
                  })}
                />

                <div className={classNames(projectcss.all, sty.freeBox__lcqpI)}>
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aoIqz
                        )}
                      >
                        {"2"}
                      </div>
                    ),

                    value: args.badgenum,
                    className: classNames(sty.slotTargetBadgenum)
                  })}
                </div>
              </div>
            </div>
          ) : null}
        </div>
      ) : null}

      <div className={classNames(projectcss.all, sty.freeBox__shXiS)}>
        {(hasVariant(variants, "mode", "standard") ? true : true) ? (
          <Icon11Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgisActive]: hasVariant(variants, "isActive", "isActive"),
              [sty.svgitemName]: hasVariant(variants, "itemName", "itemName"),
              [sty.svgmode_standard]: hasVariant(variants, "mode", "standard")
            })}
            role={"img"}
          />
        ) : null}
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "badge2",
    "primary",
    "_32Shape02BadgeLableRound",
    "shadow2",
    "background3",
    "svg"
  ],
  badge2: [
    "badge2",
    "primary",
    "_32Shape02BadgeLableRound",
    "shadow2",
    "background3"
  ],
  primary: ["primary", "_32Shape02BadgeLableRound", "shadow2", "background3"],
  _32Shape02BadgeLableRound: [
    "_32Shape02BadgeLableRound",
    "shadow2",
    "background3"
  ],
  shadow2: ["shadow2"],
  background3: ["background3"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  badge2: "div";
  primary: "div";
  _32Shape02BadgeLableRound: "div";
  shadow2: "div";
  background3: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebarItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebarItem__VariantsArgs;
    args?: PlasmicSidebarItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebarItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebarItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebarItem__ArgProps,
      internalVariantPropNames: PlasmicSidebarItem__VariantProps
    });

    return PlasmicSidebarItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebarItem";
  } else {
    func.displayName = `PlasmicSidebarItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarItem = Object.assign(
  // Top-level PlasmicSidebarItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    badge2: makeNodeComponent("badge2"),
    primary: makeNodeComponent("primary"),
    _32Shape02BadgeLableRound: makeNodeComponent("_32Shape02BadgeLableRound"),
    shadow2: makeNodeComponent("shadow2"),
    background3: makeNodeComponent("background3"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicSidebarItem
    internalVariantProps: PlasmicSidebarItem__VariantProps,
    internalArgProps: PlasmicSidebarItem__ArgProps
  }
);

export default PlasmicSidebarItem;
/* prettier-ignore-end */
