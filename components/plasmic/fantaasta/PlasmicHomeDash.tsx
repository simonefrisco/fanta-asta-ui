// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xdSnfxWCziyzb8tBiGitqa
// Component: OBeI1cWkLth
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fantaasta.module.css"; // plasmic-import: xdSnfxWCziyzb8tBiGitqa/projectcss
import sty from "./PlasmicHomeDash.module.css"; // plasmic-import: OBeI1cWkLth/css

import CancelIcon from "./icons/PlasmicIcon__Cancel"; // plasmic-import: fIWqBdD_Vcs/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: Dz2-NnCEs4Z/icon
import NotificationsIcon from "./icons/PlasmicIcon__Notifications"; // plasmic-import: 28qGRcgBF8O/icon
import ArrowDropDownIcon from "./icons/PlasmicIcon__ArrowDropDown"; // plasmic-import: P0FXFDHdpln/icon
import HorizontalIcon from "./icons/PlasmicIcon__Horizontal"; // plasmic-import: WAUl1jO6PZX/icon
import Horizontal2Icon from "./icons/PlasmicIcon__Horizontal2"; // plasmic-import: sasyvq5kkYH/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: msMKgGOxL/icon
import Horizontal3Icon from "./icons/PlasmicIcon__Horizontal3"; // plasmic-import: cRiIfGDQiCW/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: QVEWgjasr4y/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: GkhW16sGEpk/icon

export type PlasmicHomeDash__VariantMembers = {};

export type PlasmicHomeDash__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeDash__VariantsArgs;
export const PlasmicHomeDash__VariantProps = new Array<VariantPropType>();

export type PlasmicHomeDash__ArgsType = {};
type ArgPropType = keyof PlasmicHomeDash__ArgsType;
export const PlasmicHomeDash__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeDash__OverridesType = {
  home?: p.Flex<"div">;
  searchBar?: p.Flex<"div">;
  right4?: p.Flex<"div">;
  left?: p.Flex<"div">;
  textState?: p.Flex<"div">;
  frame71?: p.Flex<"div">;
  group10?: p.Flex<"div">;
  counter?: p.Flex<"div">;
  frame7?: p.Flex<"div">;
  avatar?: p.Flex<"div">;
  status?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  avatarOneLine?: p.Flex<"div">;
  avatar2?: p.Flex<"div">;
  kk?: p.Flex<"div">;
  statusDot?: p.Flex<"div">;
  mikeBrown?: p.Flex<"div">;
  frame108?: p.Flex<"div">;
  frame109?: p.Flex<"div">;
  frame111?: p.Flex<"div">;
  button?: p.Flex<"div">;
  button2?: p.Flex<"div">;
  text2?: p.Flex<"div">;
  counter2?: p.Flex<"div">;
  frame110?: p.Flex<"div">;
  avatarOneLine2?: p.Flex<"div">;
  avatar3?: p.Flex<"div">;
  status2?: p.Flex<"div">;
  mikeBrown2?: p.Flex<"div">;
  frame114?: p.Flex<"div">;
  avatarOneLine3?: p.Flex<"div">;
  avatar4?: p.Flex<"div">;
  statusDot2?: p.Flex<"div">;
  badge?: p.Flex<"div">;
  xBaseBadge?: p.Flex<"div">;
  text3?: p.Flex<"div">;
  frame115?: p.Flex<"div">;
  avatarOneLine4?: p.Flex<"div">;
  avatar5?: p.Flex<"div">;
  statusDot3?: p.Flex<"div">;
  badge2?: p.Flex<"div">;
  xBaseBadge2?: p.Flex<"div">;
  text4?: p.Flex<"div">;
  ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni?: p.Flex<"div">;
};

export interface DefaultHomeDashProps {}

function PlasmicHomeDash__RenderFunc(props: {
  variants: PlasmicHomeDash__VariantsArgs;
  args: PlasmicHomeDash__ArgsType;
  overrides: PlasmicHomeDash__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.home
          )}
        >
          <div
            data-plasmic-name={"searchBar"}
            data-plasmic-override={overrides.searchBar}
            className={classNames(projectcss.all, sty.searchBar)}
          >
            {false ? (
              <div
                data-plasmic-name={"right4"}
                data-plasmic-override={overrides.right4}
                className={classNames(projectcss.all, sty.right4)}
              >
                <CancelIcon
                  className={classNames(projectcss.all, sty.svg___6Boau)}
                  role={"img"}
                />
              </div>
            ) : null}

            <div
              data-plasmic-name={"left"}
              data-plasmic-override={overrides.left}
              className={classNames(projectcss.all, sty.left)}
            >
              <SearchIcon
                className={classNames(projectcss.all, sty.svg__wUlco)}
                role={"img"}
              />

              <div
                data-plasmic-name={"textState"}
                data-plasmic-override={overrides.textState}
                className={classNames(projectcss.all, sty.textState)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uoEp3
                  )}
                >
                  {"Search"}
                </div>
              </div>
            </div>
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame71"}
            data-plasmic-override={overrides.frame71}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame71)}
          >
            <div
              data-plasmic-name={"group10"}
              data-plasmic-override={overrides.group10}
              className={classNames(projectcss.all, sty.group10)}
            >
              <NotificationsIcon
                className={classNames(projectcss.all, sty.svg__l3KAv)}
                role={"img"}
              />

              <div
                data-plasmic-name={"counter"}
                data-plasmic-override={overrides.counter}
                className={classNames(projectcss.all, sty.counter)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__s6ZK
                  )}
                >
                  {"2"}
                </div>
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame7"}
              data-plasmic-override={overrides.frame7}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame7)}
            >
              <div
                data-plasmic-name={"avatar"}
                data-plasmic-override={overrides.avatar}
                className={classNames(projectcss.all, sty.avatar)}
              >
                <div
                  data-plasmic-name={"status"}
                  data-plasmic-override={overrides.status}
                  className={classNames(projectcss.all, sty.status)}
                />
              </div>

              <ArrowDropDownIcon
                className={classNames(projectcss.all, sty.svg__bMnGt)}
                role={"img"}
              />
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame6"}
              data-plasmic-override={overrides.frame6}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame6)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"avatarOneLine"}
                data-plasmic-override={overrides.avatarOneLine}
                hasGap={true}
                className={classNames(projectcss.all, sty.avatarOneLine)}
              >
                <div
                  data-plasmic-name={"avatar2"}
                  data-plasmic-override={overrides.avatar2}
                  className={classNames(projectcss.all, sty.avatar2)}
                >
                  <div
                    data-plasmic-name={"kk"}
                    data-plasmic-override={overrides.kk}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.kk
                    )}
                  >
                    {"P"}
                  </div>

                  {false ? (
                    <div
                      data-plasmic-name={"statusDot"}
                      data-plasmic-override={overrides.statusDot}
                      className={classNames(projectcss.all, sty.statusDot)}
                    />
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"mikeBrown"}
                  data-plasmic-override={overrides.mikeBrown}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.mikeBrown
                  )}
                >
                  {"Pixsellz"}
                </div>
              </p.Stack>

              <ArrowDropDownIcon
                className={classNames(projectcss.all, sty.svg__ohEgc)}
                role={"img"}
              />
            </p.Stack>
          </p.Stack>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ov8E5
            )}
          >
            {"Homepage"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jH8Db
            )}
          >
            {"Good to see you again, James"}
          </div>

          <div
            data-plasmic-name={"frame108"}
            data-plasmic-override={overrides.frame108}
            className={classNames(projectcss.all, sty.frame108)}
          >
            <HorizontalIcon
              className={classNames(projectcss.all, sty.svg___7PfdL)}
              role={"img"}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame109"}
              data-plasmic-override={overrides.frame109}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame109)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ocbIb
                )}
              >
                {"Statistiche"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__isq95
                )}
              >
                {"Unisciti ad un asta"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t53V4
                )}
              >
                {"Formazione ideale"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lUcH
                )}
              >
                {"Profilo allenatore"}
              </div>
            </p.Stack>

            <Horizontal2Icon
              className={classNames(projectcss.all, sty.svg___23IAb)}
              role={"img"}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame111"}
              data-plasmic-override={overrides.frame111}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame111)}
            >
              <div
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames(projectcss.all, sty.button)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.button2)}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__gOzuN)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    data-plasmic-name={"text2"}
                    data-plasmic-override={overrides.text2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text2
                    )}
                  >
                    {"Crea Asta"}
                  </div>

                  {false ? (
                    <div
                      data-plasmic-name={"counter2"}
                      data-plasmic-override={overrides.counter2}
                      className={classNames(projectcss.all, sty.counter2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wRsYx
                        )}
                      >
                        {"0"}
                      </div>
                    </div>
                  ) : null}
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___1QdUz)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame110"}
                data-plasmic-override={overrides.frame110}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame110)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"avatarOneLine2"}
                  data-plasmic-override={overrides.avatarOneLine2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.avatarOneLine2)}
                >
                  <div
                    data-plasmic-name={"avatar3"}
                    data-plasmic-override={overrides.avatar3}
                    className={classNames(projectcss.all, sty.avatar3)}
                  >
                    <div
                      data-plasmic-name={"status2"}
                      data-plasmic-override={overrides.status2}
                      className={classNames(projectcss.all, sty.status2)}
                    />
                  </div>

                  <div
                    data-plasmic-name={"mikeBrown2"}
                    data-plasmic-override={overrides.mikeBrown2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.mikeBrown2
                    )}
                  >
                    {"James Smith"}
                  </div>
                </p.Stack>

                <ArrowDropDownIcon
                  className={classNames(projectcss.all, sty.svg__cKtYx)}
                  role={"img"}
                />
              </p.Stack>
            </p.Stack>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__owq7I
            )}
          >
            {"Il fantacalcio in due modalità"}
          </div>

          <div
            data-plasmic-name={"frame114"}
            data-plasmic-override={overrides.frame114}
            className={classNames(projectcss.all, sty.frame114)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"avatarOneLine3"}
              data-plasmic-override={overrides.avatarOneLine3}
              hasGap={true}
              className={classNames(projectcss.all, sty.avatarOneLine3)}
            >
              <div
                data-plasmic-name={"avatar4"}
                data-plasmic-override={overrides.avatar4}
                className={classNames(projectcss.all, sty.avatar4)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"statusDot2"}
                    data-plasmic-override={overrides.statusDot2}
                    className={classNames(projectcss.all, sty.statusDot2)}
                  />
                ) : null}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0T9
                )}
              >
                {"MANTRA"}
              </div>
            </p.Stack>

            <Horizontal3Icon
              className={classNames(projectcss.all, sty.svg___16XV)}
              role={"img"}
            />

            <div
              data-plasmic-name={"badge"}
              data-plasmic-override={overrides.badge}
              className={classNames(projectcss.all, sty.badge)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"xBaseBadge"}
                data-plasmic-override={overrides.xBaseBadge}
                hasGap={true}
                className={classNames(projectcss.all, sty.xBaseBadge)}
              >
                <Icon5Icon
                  className={classNames(projectcss.all, sty.svg__fdnvB)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"text3"}
                  data-plasmic-override={overrides.text3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text3
                  )}
                >
                  {"Sales"}
                </div>

                {false ? (
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__boiBl)}
                    role={"img"}
                  />
                ) : null}
              </p.Stack>
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ipFh6
              )}
            >
              {"$2,794.00"}
            </div>
          </div>

          <div
            data-plasmic-name={"frame115"}
            data-plasmic-override={overrides.frame115}
            className={classNames(projectcss.all, sty.frame115)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"avatarOneLine4"}
              data-plasmic-override={overrides.avatarOneLine4}
              hasGap={true}
              className={classNames(projectcss.all, sty.avatarOneLine4)}
            >
              <div
                data-plasmic-name={"avatar5"}
                data-plasmic-override={overrides.avatar5}
                className={classNames(projectcss.all, sty.avatar5)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"statusDot3"}
                    data-plasmic-override={overrides.statusDot3}
                    className={classNames(projectcss.all, sty.statusDot3)}
                  />
                ) : null}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l5Eg8
                )}
              >
                {"CLASSICO"}
              </div>
            </p.Stack>

            <Horizontal3Icon
              className={classNames(projectcss.all, sty.svg__lbyyE)}
              role={"img"}
            />

            <div
              data-plasmic-name={"badge2"}
              data-plasmic-override={overrides.badge2}
              className={classNames(projectcss.all, sty.badge2)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"xBaseBadge2"}
                data-plasmic-override={overrides.xBaseBadge2}
                hasGap={true}
                className={classNames(projectcss.all, sty.xBaseBadge2)}
              >
                <Icon5Icon
                  className={classNames(projectcss.all, sty.svg__pTfMb)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"text4"}
                  data-plasmic-override={overrides.text4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text4
                  )}
                >
                  {"Sales"}
                </div>

                {false ? (
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg___7UVz)}
                    role={"img"}
                  />
                ) : null}
              </p.Stack>
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__r2Vuo
              )}
            >
              {"$2,794.00"}
            </div>
          </div>

          <div
            data-plasmic-name={
              "ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni"
            }
            data-plasmic-override={
              overrides.ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni
            }
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni
            )}
          >
            {
              "\tIl classico gioco del fantacalcio, arricchito dalla possibilità di giocare con moduli personalizzabili per Lega e di impostare numero di panchinari e ordine panchina secondo le proprie preferenze, insieme a centinaia di altre opzioni!"
            }
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xj9C
            )}
          >
            {
              'Un\'esperienza di gioco coinvolgente e divertente con calciatori polivalenti, specializzazione dei ruoli e moduli "reali" con enfatizzazione della componente tattico-strategica. Avanzato meccanismo di sostituzioni.'
            }
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ujkP
            )}
          >
            {"Opzioni personalizzabile per la tua lega"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wZaBu
            )}
          >
            {
              "+Competizioni multiple\r\n\n+Competizioni a Calendario, Formula 1, Coppe, Ognuno per sé, Scontri Diretti\r\n\n+Calendario personalizzabile\r\n\n+Gestione mercati online con aste e buste\r\n\n+Scambi tramite messaggi privati\n\r\n*Documenti di lega\n\r\n*Amministratori delegati\r\n\n*Cambio partecipanti\n\r\n*Classifiche di giornata\r\n\n*Calcoli con voti e medie voti"
            }
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zp9Cp
            )}
          >
            {"SEZIONE VIDEO"}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  home: [
    "home",
    "searchBar",
    "right4",
    "left",
    "textState",
    "frame71",
    "group10",
    "counter",
    "frame7",
    "avatar",
    "status",
    "frame6",
    "avatarOneLine",
    "avatar2",
    "kk",
    "statusDot",
    "mikeBrown",
    "frame108",
    "frame109",
    "frame111",
    "button",
    "button2",
    "text2",
    "counter2",
    "frame110",
    "avatarOneLine2",
    "avatar3",
    "status2",
    "mikeBrown2",
    "frame114",
    "avatarOneLine3",
    "avatar4",
    "statusDot2",
    "badge",
    "xBaseBadge",
    "text3",
    "frame115",
    "avatarOneLine4",
    "avatar5",
    "statusDot3",
    "badge2",
    "xBaseBadge2",
    "text4",
    "ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni"
  ],
  searchBar: ["searchBar", "right4", "left", "textState"],
  right4: ["right4"],
  left: ["left", "textState"],
  textState: ["textState"],
  frame71: [
    "frame71",
    "group10",
    "counter",
    "frame7",
    "avatar",
    "status",
    "frame6",
    "avatarOneLine",
    "avatar2",
    "kk",
    "statusDot",
    "mikeBrown"
  ],
  group10: ["group10", "counter"],
  counter: ["counter"],
  frame7: ["frame7", "avatar", "status"],
  avatar: ["avatar", "status"],
  status: ["status"],
  frame6: [
    "frame6",
    "avatarOneLine",
    "avatar2",
    "kk",
    "statusDot",
    "mikeBrown"
  ],
  avatarOneLine: ["avatarOneLine", "avatar2", "kk", "statusDot", "mikeBrown"],
  avatar2: ["avatar2", "kk", "statusDot"],
  kk: ["kk"],
  statusDot: ["statusDot"],
  mikeBrown: ["mikeBrown"],
  frame108: [
    "frame108",
    "frame109",
    "frame111",
    "button",
    "button2",
    "text2",
    "counter2",
    "frame110",
    "avatarOneLine2",
    "avatar3",
    "status2",
    "mikeBrown2"
  ],
  frame109: ["frame109"],
  frame111: [
    "frame111",
    "button",
    "button2",
    "text2",
    "counter2",
    "frame110",
    "avatarOneLine2",
    "avatar3",
    "status2",
    "mikeBrown2"
  ],
  button: ["button", "button2", "text2", "counter2"],
  button2: ["button2", "text2", "counter2"],
  text2: ["text2"],
  counter2: ["counter2"],
  frame110: ["frame110", "avatarOneLine2", "avatar3", "status2", "mikeBrown2"],
  avatarOneLine2: ["avatarOneLine2", "avatar3", "status2", "mikeBrown2"],
  avatar3: ["avatar3", "status2"],
  status2: ["status2"],
  mikeBrown2: ["mikeBrown2"],
  frame114: [
    "frame114",
    "avatarOneLine3",
    "avatar4",
    "statusDot2",
    "badge",
    "xBaseBadge",
    "text3"
  ],
  avatarOneLine3: ["avatarOneLine3", "avatar4", "statusDot2"],
  avatar4: ["avatar4", "statusDot2"],
  statusDot2: ["statusDot2"],
  badge: ["badge", "xBaseBadge", "text3"],
  xBaseBadge: ["xBaseBadge", "text3"],
  text3: ["text3"],
  frame115: [
    "frame115",
    "avatarOneLine4",
    "avatar5",
    "statusDot3",
    "badge2",
    "xBaseBadge2",
    "text4"
  ],
  avatarOneLine4: ["avatarOneLine4", "avatar5", "statusDot3"],
  avatar5: ["avatar5", "statusDot3"],
  statusDot3: ["statusDot3"],
  badge2: ["badge2", "xBaseBadge2", "text4"],
  xBaseBadge2: ["xBaseBadge2", "text4"],
  text4: ["text4"],
  ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni:
    [
      "ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni"
    ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  home: "div";
  searchBar: "div";
  right4: "div";
  left: "div";
  textState: "div";
  frame71: "div";
  group10: "div";
  counter: "div";
  frame7: "div";
  avatar: "div";
  status: "div";
  frame6: "div";
  avatarOneLine: "div";
  avatar2: "div";
  kk: "div";
  statusDot: "div";
  mikeBrown: "div";
  frame108: "div";
  frame109: "div";
  frame111: "div";
  button: "div";
  button2: "div";
  text2: "div";
  counter2: "div";
  frame110: "div";
  avatarOneLine2: "div";
  avatar3: "div";
  status2: "div";
  mikeBrown2: "div";
  frame114: "div";
  avatarOneLine3: "div";
  avatar4: "div";
  statusDot2: "div";
  badge: "div";
  xBaseBadge: "div";
  text3: "div";
  frame115: "div";
  avatarOneLine4: "div";
  avatar5: "div";
  statusDot3: "div";
  badge2: "div";
  xBaseBadge2: "div";
  text4: "div";
  ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeDash__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeDash__VariantsArgs;
    args?: PlasmicHomeDash__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeDash__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomeDash__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomeDash__ArgProps,
      internalVariantPropNames: PlasmicHomeDash__VariantProps
    });

    return PlasmicHomeDash__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home") {
    func.displayName = "PlasmicHomeDash";
  } else {
    func.displayName = `PlasmicHomeDash.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeDash = Object.assign(
  // Top-level PlasmicHomeDash renders the root element
  makeNodeComponent("home"),
  {
    // Helper components rendering sub-elements
    searchBar: makeNodeComponent("searchBar"),
    right4: makeNodeComponent("right4"),
    left: makeNodeComponent("left"),
    textState: makeNodeComponent("textState"),
    frame71: makeNodeComponent("frame71"),
    group10: makeNodeComponent("group10"),
    counter: makeNodeComponent("counter"),
    frame7: makeNodeComponent("frame7"),
    avatar: makeNodeComponent("avatar"),
    status: makeNodeComponent("status"),
    frame6: makeNodeComponent("frame6"),
    avatarOneLine: makeNodeComponent("avatarOneLine"),
    avatar2: makeNodeComponent("avatar2"),
    kk: makeNodeComponent("kk"),
    statusDot: makeNodeComponent("statusDot"),
    mikeBrown: makeNodeComponent("mikeBrown"),
    frame108: makeNodeComponent("frame108"),
    frame109: makeNodeComponent("frame109"),
    frame111: makeNodeComponent("frame111"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    text2: makeNodeComponent("text2"),
    counter2: makeNodeComponent("counter2"),
    frame110: makeNodeComponent("frame110"),
    avatarOneLine2: makeNodeComponent("avatarOneLine2"),
    avatar3: makeNodeComponent("avatar3"),
    status2: makeNodeComponent("status2"),
    mikeBrown2: makeNodeComponent("mikeBrown2"),
    frame114: makeNodeComponent("frame114"),
    avatarOneLine3: makeNodeComponent("avatarOneLine3"),
    avatar4: makeNodeComponent("avatar4"),
    statusDot2: makeNodeComponent("statusDot2"),
    badge: makeNodeComponent("badge"),
    xBaseBadge: makeNodeComponent("xBaseBadge"),
    text3: makeNodeComponent("text3"),
    frame115: makeNodeComponent("frame115"),
    avatarOneLine4: makeNodeComponent("avatarOneLine4"),
    avatar5: makeNodeComponent("avatar5"),
    statusDot3: makeNodeComponent("statusDot3"),
    badge2: makeNodeComponent("badge2"),
    xBaseBadge2: makeNodeComponent("xBaseBadge2"),
    text4: makeNodeComponent("text4"),
    ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni:
      makeNodeComponent(
        "ilClassicoGiocoDelFantacalcioArricchitoDallaPossibilitaDiGiocareConModuliPersonalizzabiliPerLegaEDiImpostareNumeroDiPanchinariEOrdinePanchinaSecondoLePropriePreferenzeInsiemeACentinaiaDiAltreOpzioni"
      ),

    // Metadata about props expected for PlasmicHomeDash
    internalVariantProps: PlasmicHomeDash__VariantProps,
    internalArgProps: PlasmicHomeDash__ArgProps
  }
);

export default PlasmicHomeDash;
/* prettier-ignore-end */
