// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xdSnfxWCziyzb8tBiGitqa
// Component: JGXUTtU5D6Eq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fantaasta.module.css"; // plasmic-import: xdSnfxWCziyzb8tBiGitqa/projectcss
import sty from "./PlasmicSettingInput.module.css"; // plasmic-import: JGXUTtU5D6Eq/css

export type PlasmicSettingInput__VariantMembers = {
  state: "completed" | "editing";
  isDisabled: "isDisabled";
};

export type PlasmicSettingInput__VariantsArgs = {
  state?: MultiChoiceArg<"completed" | "editing">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
};

type VariantPropType = keyof PlasmicSettingInput__VariantsArgs;
export const PlasmicSettingInput__VariantProps = new Array<VariantPropType>(
  "state",
  "isDisabled"
);

export type PlasmicSettingInput__ArgsType = {
  namesetting?: React.ReactNode;
  value?: any;
  placeholder?: string;
  disabled?: boolean;
};

type ArgPropType = keyof PlasmicSettingInput__ArgsType;
export const PlasmicSettingInput__ArgProps = new Array<ArgPropType>(
  "namesetting",
  "value",
  "placeholder",
  "disabled"
);

export type PlasmicSettingInput__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  textinput?: p.Flex<"input">;
};

export interface DefaultSettingInputProps {
  namesetting?: React.ReactNode;
  value?: any;
  placeholder?: string;
  disabled?: boolean;
  state?: MultiChoiceArg<"completed" | "editing">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  className?: string;
}

function PlasmicSettingInput__RenderFunc(props: {
  variants: PlasmicSettingInput__VariantsArgs;
  args: PlasmicSettingInput__ArgsType;
  overrides: PlasmicSettingInput__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootisDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.rootstate_completed]: hasVariant(variants, "state", "completed"),
          [sty.rootstate_editing]: hasVariant(variants, "state", "editing")
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Name Setting",
        value: args.namesetting,
        className: classNames(sty.slotTargetNamesetting, {
          [sty.slotTargetNamesettingisDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.slotTargetNamesettingstate_editing]: hasVariant(
            variants,
            "state",
            "editing"
          )
        })
      })}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxisDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.freeBoxstate_completed]: hasVariant(
            variants,
            "state",
            "completed"
          ),
          [sty.freeBoxstate_editing]: hasVariant(variants, "state", "editing")
        })}
      >
        {(hasVariant(variants, "state", "editing") ? true : true) ? (
          <input
            data-plasmic-name={"textinput"}
            data-plasmic-override={overrides.textinput}
            className={classNames(
              projectcss.all,
              projectcss.input,
              sty.textinput,
              {
                [sty.textinputisDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.textinputstate_editing]: hasVariant(
                  variants,
                  "state",
                  "editing"
                )
              }
            )}
            disabled={
              hasVariant(variants, "isDisabled", "isDisabled")
                ? true
                : undefined
            }
            placeholder={args.placeholder}
            size={1 as const}
            type={"text" as const}
            value={args.value}
          />
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "textinput"],
  freeBox: ["freeBox", "textinput"],
  textinput: ["textinput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  textinput: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettingInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettingInput__VariantsArgs;
    args?: PlasmicSettingInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettingInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSettingInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSettingInput__ArgProps,
      internalVariantPropNames: PlasmicSettingInput__VariantProps
    });

    return PlasmicSettingInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettingInput";
  } else {
    func.displayName = `PlasmicSettingInput.${nodeName}`;
  }
  return func;
}

export const PlasmicSettingInput = Object.assign(
  // Top-level PlasmicSettingInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    textinput: makeNodeComponent("textinput"),

    // Metadata about props expected for PlasmicSettingInput
    internalVariantProps: PlasmicSettingInput__VariantProps,
    internalArgProps: PlasmicSettingInput__ArgProps
  }
);

export default PlasmicSettingInput;
/* prettier-ignore-end */
