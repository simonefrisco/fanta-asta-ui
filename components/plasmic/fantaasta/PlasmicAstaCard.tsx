// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xdSnfxWCziyzb8tBiGitqa
// Component: ZY2_lRDBfym
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fantaasta.module.css"; // plasmic-import: xdSnfxWCziyzb8tBiGitqa/projectcss
import sty from "./PlasmicAstaCard.module.css"; // plasmic-import: ZY2_lRDBfym/css

export type PlasmicAstaCard__VariantMembers = {};

export type PlasmicAstaCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicAstaCard__VariantsArgs;
export const PlasmicAstaCard__VariantProps = new Array<VariantPropType>();

export type PlasmicAstaCard__ArgsType = {
  redirect?: string;
};

type ArgPropType = keyof PlasmicAstaCard__ArgsType;
export const PlasmicAstaCard__ArgProps = new Array<ArgPropType>("redirect");

export type PlasmicAstaCard__OverridesType = {
  root?: p.Flex<"div">;
  eCommerce?: p.Flex<"div">;
  nameslot?: p.Flex<"div">;
  descriptionslot?: p.Flex<"div">;
  numpartecipantsslot?: p.Flex<"div">;
  partecipantsleftslot?: p.Flex<"div">;
  budgetslot?: p.Flex<"div">;
};

export interface DefaultAstaCardProps {
  redirect?: string;
  className?: string;
}

function PlasmicAstaCard__RenderFunc(props: {
  variants: PlasmicAstaCard__VariantsArgs;
  args: PlasmicAstaCard__ArgsType;
  overrides: PlasmicAstaCard__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"eCommerce"}
        data-plasmic-override={overrides.eCommerce}
        hasGap={true}
        className={classNames(projectcss.all, sty.eCommerce)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__z0U9O)}>
          <div className={classNames(projectcss.all, sty.freeBox__viRf)}>
            <div
              data-plasmic-name={"nameslot"}
              data-plasmic-override={overrides.nameslot}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.nameslot
              )}
            >
              {"Nome Asta"}
            </div>
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__a7ILx)}>
          <div className={classNames(projectcss.all, sty.freeBox__bgMsf)}>
            <div
              data-plasmic-name={"descriptionslot"}
              data-plasmic-override={overrides.descriptionslot}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.descriptionslot
              )}
            >
              {"Numero Partecipanti"}
            </div>
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vNyig)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__qeI7E)} />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9Uej9
            )}
          >
            {"Numero Partecipanti"}
          </div>

          <div
            data-plasmic-name={"numpartecipantsslot"}
            data-plasmic-override={overrides.numpartecipantsslot}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.numpartecipantsslot
            )}
          >
            {"Enter some text"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ycfrh)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__zhmKa)} />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ibjF1
            )}
          >
            {"Partecipanti Confermati"}
          </div>

          <div
            data-plasmic-name={"partecipantsleftslot"}
            data-plasmic-override={overrides.partecipantsleftslot}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.partecipantsleftslot
            )}
          >
            {"Enter some text"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__m74Sb)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__p9Gbd
            )}
          >
            {"Budget "}
          </div>

          <div
            data-plasmic-name={"budgetslot"}
            data-plasmic-override={overrides.budgetslot}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.budgetslot
            )}
          >
            {"Enter some text"}
          </div>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "eCommerce",
    "nameslot",
    "descriptionslot",
    "numpartecipantsslot",
    "partecipantsleftslot",
    "budgetslot"
  ],
  eCommerce: [
    "eCommerce",
    "nameslot",
    "descriptionslot",
    "numpartecipantsslot",
    "partecipantsleftslot",
    "budgetslot"
  ],
  nameslot: ["nameslot"],
  descriptionslot: ["descriptionslot"],
  numpartecipantsslot: ["numpartecipantsslot"],
  partecipantsleftslot: ["partecipantsleftslot"],
  budgetslot: ["budgetslot"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  eCommerce: "div";
  nameslot: "div";
  descriptionslot: "div";
  numpartecipantsslot: "div";
  partecipantsleftslot: "div";
  budgetslot: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAstaCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAstaCard__VariantsArgs;
    args?: PlasmicAstaCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAstaCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAstaCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAstaCard__ArgProps,
      internalVariantPropNames: PlasmicAstaCard__VariantProps
    });

    return PlasmicAstaCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAstaCard";
  } else {
    func.displayName = `PlasmicAstaCard.${nodeName}`;
  }
  return func;
}

export const PlasmicAstaCard = Object.assign(
  // Top-level PlasmicAstaCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    eCommerce: makeNodeComponent("eCommerce"),
    nameslot: makeNodeComponent("nameslot"),
    descriptionslot: makeNodeComponent("descriptionslot"),
    numpartecipantsslot: makeNodeComponent("numpartecipantsslot"),
    partecipantsleftslot: makeNodeComponent("partecipantsleftslot"),
    budgetslot: makeNodeComponent("budgetslot"),

    // Metadata about props expected for PlasmicAstaCard
    internalVariantProps: PlasmicAstaCard__VariantProps,
    internalArgProps: PlasmicAstaCard__ArgProps
  }
);

export default PlasmicAstaCard;
/* prettier-ignore-end */
